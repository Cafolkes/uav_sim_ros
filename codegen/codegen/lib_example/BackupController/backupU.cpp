//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: backupU.cpp
//
// MATLAB Coder version            : 4.2
// C/C++ source code generated on  : 27-Feb-2020 15:55:30
//

// Include Files
#include <math.h>
#include "rt_defines.h"
#include "rt_nonfinite.h"
#include <cmath>
#include "BackupController.h"
#include "backupU.h"
#include "BackupController_rtwutil.h"

// Function Declarations
static double rt_atan2d_snf(double u0, double u1);

// Function Definitions

//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_atan2d_snf(double u0, double u1)
{
  double y;
  int b_u0;
  int b_u1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
      b_u0 = 1;
    } else {
      b_u0 = -1;
    }

    if (u1 > 0.0) {
      b_u1 = 1;
    } else {
      b_u1 = -1;
    }

    y = atan2((double)b_u0, (double)b_u1);
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

//
// BACKUPU
//     U = BACKUPU(IN1,IN2)
// Arguments    : const double in1[17]
//                const double in2[6]
//                double U[4]
// Return Type  : void
//
void backupU(const double in1[17], const double in2[6], double U[4])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t17;
  double t18;
  double t19;
  double t40;
  double t52;
  double t28_tmp;
  double t36_re_tmp;
  double b_t36_re_tmp;
  double t34;

  //     This function was generated by the Symbolic Math Toolbox version 8.3.
  //     27-Feb-2020 15:55:25
  t2 = in2[1] * in1[9];
  t3 = in2[3] * in1[10];
  t4 = in2[3] * in1[11];
  t5 = in2[4] * in1[12];
  t17 = in1[4] * in1[4] * 2.0;
  t18 = in1[5] * in1[5] * 2.0;
  t19 = in1[6] * in1[6] * 2.0;
  t40 = in1[3] * in1[6];
  t52 = in1[4] * in1[5];
  t28_tmp = t40 * 2.0 + t52 * 2.0;
  t36_re_tmp = in1[3] * in1[4];
  b_t36_re_tmp = in1[5] * in1[6];
  t34 = in2[5] * (1.0 / ((t17 + t18) - 1.0));
  t40 = 1.0 / rt_hypotd_snf((((-t18 + -t19) + t40 * 0.0) + t52 * 0.0) + 1.0,
    t28_tmp);
  t28_tmp *= t40;
  t40 *= (t18 + t19) - 1.0;
  t52 = in2[2] * (std::asin(in1[3] * in1[5] * 2.0 + -(in1[4] * in1[6] * 2.0)) +
                  in2[0] * (t28_tmp * in1[8] - t40 * in1[7]));
  t40 = in2[2] * (rt_atan2d_snf(t36_re_tmp * 2.0 + b_t36_re_tmp * 2.0, (((-t17 +
    -t18) + t36_re_tmp * 0.0) + b_t36_re_tmp * 0.0) + 1.0) + in2[0] * (t28_tmp *
    in1[7] + t40 * in1[8]));
  U[0] = (((((t3 + t4) + t5) + -t2) + -t34) + t52) + t40;
  U[1] = (((((t3 + -t2) + -t4) + -t5) + -t34) + -t52) + t40;
  U[2] = (((((t5 + -t2) + -t3) + -t4) + -t34) + -t52) + -t40;
  U[3] = (((((t4 + -t2) + -t3) + -t5) + -t34) + t52) + -t40;
}

//
// File trailer for backupU.cpp
//
// [EOF]
//
